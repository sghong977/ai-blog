"use strict";(self.webpackChunkai_blog=self.webpackChunkai_blog||[]).push([[2605],{3905:(e,t,a)=>{a.d(t,{Zo:()=>u,kt:()=>h});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var s=n.createContext({}),p=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},u=function(e){var t=p(e.components);return n.createElement(s.Provider,{value:t},e.children)},m="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),m=p(a),d=r,h=m["".concat(s,".").concat(d)]||m[d]||c[d]||i;return a?n.createElement(h,l(l({ref:t},u),{},{components:a})):n.createElement(h,l({ref:t},u))}));function h(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=a.length,l=new Array(i);l[0]=d;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[m]="string"==typeof e?e:r,l[1]=o;for(var p=2;p<i;p++)l[p]=a[p];return n.createElement.apply(null,l)}return n.createElement.apply(null,a)}d.displayName="MDXCreateElement"},139:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>c,frontMatter:()=>i,metadata:()=>o,toc:()=>p});var n=a(7462),r=(a(7294),a(3905));const i={slug:"disk",title:"(MY NOTE) Briefly review the code of deep feature, DISK",authors:"seulgi",tags:["Research Note","DISK","Deep Features","COLMAP"]},l=void 0,o={permalink:"/ai-blog/blog/disk",source:"@site/blog/research-note/2023-03-24-disk.md",title:"(MY NOTE) Briefly review the code of deep feature, DISK",description:"How can I custom COLMAP to use the other deep features? Currently I'm stuck into this, so I'll take a look at the way how DISK customize their output to COLMAP for the following SfM steps.",date:"2023-03-24T00:00:00.000Z",formattedDate:"March 24, 2023",tags:[{label:"Research Note",permalink:"/ai-blog/blog/tags/research-note"},{label:"DISK",permalink:"/ai-blog/blog/tags/disk"},{label:"Deep Features",permalink:"/ai-blog/blog/tags/deep-features"},{label:"COLMAP",permalink:"/ai-blog/blog/tags/colmap"}],readingTime:3.63,hasTruncateMarker:!1,authors:[{name:"SeulGi Hong",title:"Vision AI Engineer",url:"https://github.com/sghong977",imageURL:"https://avatars.githubusercontent.com/u/46152199?v=4",key:"seulgi"}],frontMatter:{slug:"disk",title:"(MY NOTE) Briefly review the code of deep feature, DISK",authors:"seulgi",tags:["Research Note","DISK","Deep Features","COLMAP"]},prevItem:{title:"(TRENDS) 2023.03",permalink:"/ai-blog/blog/2303"}},s={authorsImageUrls:[void 0]},p=[{value:"Concept of &#39;DISK&#39; feature algorithm",id:"concept-of-disk-feature-algorithm",level:2},{value:"Input/output",id:"inputoutput",level:2},{value:"How to save and load feature in COLMAP.",id:"how-to-save-and-load-feature-in-colmap",level:2},{value:"What kinds of information should be added to *.db file?",id:"what-kinds-of-information-should-be-added-to-db-file",level:3}],u={toc:p},m="wrapper";function c(e){let{components:t,...a}=e;return(0,r.kt)(m,(0,n.Z)({},u,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"How can I custom COLMAP to use the other deep features? Currently I'm stuck into this, so I'll take a look at the way how DISK customize their output to COLMAP for the following SfM steps."),(0,r.kt)("p",null,"These days, I'm jumping in the deep end to get familiar with COLMAP and basics of multiview geometry.\nI'm trying to use deep features (eg. LoFTR) to COLMAP but failed while sparse reconstruction. I think it's because of my wrong usage of matches_importer.\nAnd I find that Sitcoms3D do SfM using COLMAP and they also replace the basic SIFT features of colmap into 'DISK' feature."),(0,r.kt)("p",null,"So, things that I have to do in this step are:  "),(0,r.kt)("ul",{className:"contains-task-list"},(0,r.kt)("li",{parentName:"ul",className:"task-list-item"},(0,r.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","briefly see the concept of DISK feature algorithm"),(0,r.kt)("li",{parentName:"ul",className:"task-list-item"},(0,r.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","input/output"),(0,r.kt)("li",{parentName:"ul",className:"task-list-item"},(0,r.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","how to save and load feature in COLMAP"),(0,r.kt)("li",{parentName:"ul",className:"task-list-item"},(0,r.kt)("input",{parentName:"li",type:"checkbox",checked:!1,disabled:!0})," ","try to use DISK official code to check the correct values of colmap db sqlite commands"),(0,r.kt)("li",{parentName:"ul",className:"task-list-item"},(0,r.kt)("input",{parentName:"li",type:"checkbox",checked:!1,disabled:!0})," ","then, insert my custom feature algorithm to colmap db by editing sqlite commands")),(0,r.kt)("h2",{id:"concept-of-disk-feature-algorithm"},"Concept of 'DISK' feature algorithm"),(0,r.kt)("p",null,'Paper: "DISK: Learning local features with policy gradient" ',(0,r.kt)("a",{parentName:"p",href:"https://arxiv.org/abs/2006.13566"},"https://arxiv.org/abs/2006.13566")," (NeurIPS 2020)"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"first, extract a set of local features FA and FB from each"),(0,r.kt)("li",{parentName:"ul"},"and then match them to produce a set of correspondences MA\u2194B"),(0,r.kt)("li",{parentName:"ul"},"To learn how to do this through reinforcement learning, they probabilistically redefine feature distribution and match distribution."),(0,r.kt)("li",{parentName:"ul"},"about reward function & gradient estimator are described in paper... (idk RL..)\n",(0,r.kt)("img",{parentName:"li",src:"https://user-images.githubusercontent.com/46152199/227893163-6f41b6c9-05ce-4e59-82f2-92191ecb71c7.png",alt:"image"}))),(0,r.kt)("h2",{id:"inputoutput"},"Input/output"),(0,r.kt)("p",null,"setup 'DISK' ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/cvlab-epfl/disk"},"link")," environment and try."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Although I'm using DISK nested in Sitcoms3D repo ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/ethanweber/sitcoms3D/tree/master/external/disk."},"link")," but it may not work. Better to use official code.",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"i just manually download pretrained pth file, and replace detect.py into the official version."))),(0,r.kt)("li",{parentName:"ul"},"if you use docker, you may need to increase shared memory size. Default docker setting is 64MB, but out of shared memory problem occured to me, so I added '--shm-size=2gb'")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"run detect.py")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"INPUT: frames directory"),(0,r.kt)("li",{parentName:"ul"},"OUTPUT: *.h5 file (descriptors and keypoints)")),(0,r.kt)("p",null,"Output shape and values of detect.py\n",(0,r.kt)("img",{parentName:"p",src:"https://user-images.githubusercontent.com/46152199/228707697-843c2909-84c9-4474-92c0-feea96ea6d77.png",alt:"image"})),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"run match.py")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"INPUT: *.h5 file directory"),(0,r.kt)("li",{parentName:"ul"},"OUTPUT: matches.h5 file (descriptors and keypoints)")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"run colmap/h5_to_db.py")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"INPUT: frame dir, h5 dir, output db file path (end with *.db)",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"but Sitcoms3D and my case need masking, so I use binary mask that generated from Detectrion2 (Mask-RCNN)"))),(0,r.kt)("li",{parentName:"ul"},"OUTPUT: db file that compatible to COLMAP")),(0,r.kt)("p",null,"check values of db add_matches()'s params"),(0,r.kt)("p",null,(0,r.kt)("img",{parentName:"p",src:"https://user-images.githubusercontent.com/46152199/228710921-6f84ac5d-19ab-4652-a4b3-84b6557cadac.png",alt:"image"})),(0,r.kt)("p",null,"array to blob. Original array contains pair information of matching, idx1 and idx2 of each image's keypoint id.\n",(0,r.kt)("img",{parentName:"p",src:"https://user-images.githubusercontent.com/46152199/228712036-4a099000-f426-46b4-9bbf-1fc439932b77.png",alt:"image"})),(0,r.kt)("p",null,"Then, use exhaustive_matcher and mapper for sparse reconstruction.\nThese all works well in my case."),(0,r.kt)("h2",{id:"how-to-save-and-load-feature-in-colmap"},"How to save and load feature in COLMAP."),(0,r.kt)("p",null,"Please refer to 'DISK' repo."),(0,r.kt)("p",null,"Step 1. Feature Extraction."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"python detect.py h5_artifacts_destination images_directory"),(0,r.kt)("li",{parentName:"ul"},"eg. python ",(0,r.kt)("strong",{parentName:"li"},"detect.py")," --height 1024 --width 1024 --n 2048 scene/h5 scene/images")),(0,r.kt)("p",null,"Step 2. Match Keypoints"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"python match.py h5_artifacts_destination"),(0,r.kt)("li",{parentName:"ul"},"eg. python ",(0,r.kt)("strong",{parentName:"li"},"match.py")," --rt 0.95 --save-threshold 100 scene/h5")),(0,r.kt)("p",null,"Step 3. Convert to COLMAP *.db file"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"features are inserted to db ",(0,r.kt)("strong",{parentName:"li"},"without descriptor"),"."),(0,r.kt)("li",{parentName:"ul"},"eg. python colmap/",(0,r.kt)("strong",{parentName:"li"},"h5_to_db.py")," --database-path scene/database.db scene/h5 scene/images")),(0,r.kt)("p",null,"Step 4. execute colmap cli commands"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"exhaustive_matcher")," and ",(0,r.kt)("strong",{parentName:"li"},"mapper")," (sparse reconstruction)")),(0,r.kt)("p",null,(0,r.kt)("img",{parentName:"p",src:"https://user-images.githubusercontent.com/46152199/227842755-98eef01c-58f4-4dfe-8b62-b45adf6b03b8.png",alt:"image"})),(0,r.kt)("p",null,"Then, let's check how to convert h5 to db file and insert my custom features like that."),(0,r.kt)("h3",{id:"what-kinds-of-information-should-be-added-to-db-file"},"What kinds of information should be added to *.db file?"),(0,r.kt)("p",null,"h5_to_db.py do this.\n",(0,r.kt)("img",{parentName:"p",src:"https://user-images.githubusercontent.com/46152199/227880414-0060bb63-d1b1-4090-840c-d09431cfc80c.png",alt:"image"}),'{:width="80%" height="80%"}'),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"db.create_tables()"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"define tables that conpatible to colmap usage"),(0,r.kt)("li",{parentName:"ul"},"by executing 'CREATE_{CAMERAS, IMAGES, KEYPOINTS, DESCRIPTORS, MATCHES, TWO_VIEW_GEOMETRIES, NAME_INDEX}_TABLE' which are defined in colmap/colmap/database.py"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"add_keypoints()"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"this method() returns 'fname_to_id' (fname_to_id","[filename]"," = image_id)",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"connected to db.add_keypoints(image_id, keypoints) which are defined in colmap/colmap/database.py"))),(0,r.kt)("li",{parentName:"ul"},"(optional) create_camera(): add new camera model and intrinsics"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"check_masking(h5_path, mask_path)"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"this method() returns 'mask_keyp_id' (mask_keyp_id","[filename]"," = keep_inds)"),(0,r.kt)("li",{parentName:"ul"},"read mask files and check if keypoint is valid or not, and keep this information in 'mask_keyp_id'."))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"add_matches(db, h5_path, fname_to_id, mask_keyp_id)"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"get colmap image ids (id_1, id_2) from fname_to_id"),(0,r.kt)("li",{parentName:"ul"},"it calls the method db.add_matches(id_1, id_2, matches.T","[masked_matches]",") for image pairs, and add masked matching keypoints",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"matches = group","[key_2][()]"),(0,r.kt)("li",{parentName:"ul"},"i think i need to check the value. is it scaled or not, or something else..."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"my custom feature pairs should fit this form!")))))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"db.commit()"),": just commit the data to the *.db file")))}c.isMDXComponent=!0}}]);